.NET Core Overview

Billy Stack/Noel McGrath
02 November 2016


* Outline TODO: Revisit after all other slides have been done
- History
- ASP.NET Core and .NET Core Overview
- .NET Core and .NET Framework
- RoadMap
- Setup
- Hello world
- dotnet commands
- Web applicaion
- Tools and IDE


* Will not cover
- F# in general
- ASP.NET in detail


* The journey
- June 2014
- Started receiving requests for “.NET on Linux”
- Windows Nano future, much smaller server product.
- Started Project K
- Many renames, change in direction along the way, dnx, vnext etc.


* What happened along the .NET Core journey
- ASP.NET Core 1.0 is a complete re-write. 
- There is no System.Web anymore 
- Strategically so important to Microsoft
- Open source and cross platform
.link https://dusted.codes/understanding-aspnet-core-10-aka-aspnet-5-and-why-it-will-replace-classic-aspnet


* Naming change
- ASP.NET 5 is now ASP.NET Core 1.0.
- .NET Core 5 is now .NET Core 1.0.
- Entity Framework 7 is now Entity Framework Core 1.0
.image asp.jpg
.link http://www.hanselman.com/blog/ASPNET5IsDeadIntroducingASPNETCore10AndNETCore10.aspx


* ASP.NET Core and .NET Core Overview
- .NET Core 1.0.0 released 6/27/2016
- .NET Core 1.1.0 Preview 1 released 10/24/2016
.link https://github.com/dotnet/core/tree/master/release-notes
.link https://github.com/aspnet/home/releases


* .NET Core Explained
.image AspNetCoreToday.jpg
.link https://weblog.west-wind.com/posts/2016/Jun/13/ASPNET-Core-and-NET-Core-Overview


* Core CLR
.link https://github.com/dotnet/coreclr
- Contains the following:
- .NET Core runtime, called CoreCLR
- the base library, called mscorlib. It includes
- the garbage collector, 
- JIT compiler, 
- base .NET data types
- many low-level classes
- TODO: Read more about codebase	
	

* Core API (CoreFX)
.link https://github.com/dotnet/corefx
- This repo contains:
- .NET Core foundational libraries
- Classes for collections, file systems, console, XML, async and many others
.link https://docs.microsoft.com/en-us/dotnet/core/api/index (Note DataSet in index but not in codebase)


* Language compilers
-The .NET Compiler Platform ("Roslyn") provides open-source C# and Visual Basic compilers with rich code analysis APIs.
- https://github.com/dotnet/roslyn
- https://github.com/dotnet/roslyn
- https://github.com/Microsoft/visualfsharp
- https://github.com/fsharp/fsharp


* .NET CLI
.link https://github.com/dotnet/cli
 - This repo contains the .NET Core command-line (CLI) tools, used for building .NET Core apps and libraries through your development flow
 - Show dotnet build

 
* Building a Common.NET (.NET Standard)
- Current state of .NET there are a lot of different yet similar .NET runtimes
- Moving to a single .NET Standard. Provide a core base line across all platforms
- Defines uniform set of BCL APIs for all .NET platforms to implement
- Produce libraries that are usable across .NET runtimes, using same set of APIs.
.image NetPlatformOverviewTomorrow.jpg


* Differences between .NET Core and .NET Framework
- .NET Core is a platform made of NuGet packages
- Fine-grained packages can ship on their own schedule.
- .NET Core is modular, unlike .NET Framework, .NET Core relies on its package manager to receive updates.
- Can be included in your app or installed side-by-side user- or machine-wide
- Metapackages - Microsoft.NETCore.App
.link https://blogs.msdn.microsoft.com/dotnet/2016/02/10/porting-to-net-core/


* Differences between .NET Core and .NET Framework continued
- Making cross platform version of the .NET framework required some hard work and sacrifices.
- Main reasons for a feature of .NET to not appear in .NET Core
- 1. Wasn’t enough time to port a feature to .NET core
- 2. Might not make sense for a cross platform library 
- 3. Some technologies in.NET that have been around for 15+ years and are not going to move forward
.image netcorechanges_3.jpg
.link http://odetocode.com/blogs/scott/archive/2016/10/11/asp-net-core-and-the-enterprise-part-1ndashframeworks.aspx


* ASP.NET Core 1.0 or ASP.NET 4.6?
- It depends
- ASP.NET Core works with two runtime environment (.NET Core and .NET Framework)
- ASP.NET 4.6 is more mature
- Exciting stuff is going to be happening on the .NET Core platform
- Limited third party support.
.link http://www.jeffreyfritz.com/2016/08/should-i-use-asp-net-core-or-mvc-5/


* Setup SDK on Ubuntu
- See https://www.microsoft.com/net/core#ubuntu
.code ./install.sh
- apt-get install tree
-  tree /usr/share/dotnet


* Hello world C#/F#
.code createhelloworld.sh
- Explain files created
- Program.cs and project.json file
- project.json going away, why?
- Explain dotnet commands
- Explain future of project.json
- Demo same with f#

* project.json file
- Explain future of project.json
- Make it easy to work with projects across these application models
.link http://www.talkingdotnet.com/news-project-json-asp-net-core-going-away/


* dotnet commands
- The dotnet.exe command line tools combine compiler, runtime loaders, package management and deployment into a single, easy to use environment that is accessible with single commands
- Work the same on all the Operating Systems
- dotnet new
- dotnet restore
- dotnet run
- TODO Fill out more, Link and examples BS


* Web application
- Build web application
- Kestrel
- nginx as reverse proxy
- netstat -ta


* Kestrel
- It is  a fast cross-platform web server
- Builds on top of libuv, a cross-platform library for asynchronous I/O. 
- It is not a fully featured web server (request filtering, URL rewrites, etc.)
- In production use reverse proxy in front of it
- Builds on top of libuv, a cross-platform library for asynchronous I/O. 
- It is run behind IIS using the HttpPlatformHandler.
- More features being added.


* Kestrel performance
.image performance.jpg
- Benchmarks
.link https://github.com/aspnet/benchmarks
.link https://www.techempower.com/blog/2016/02/24/performance-competition-is-a-good-thing/


* Kestrel and IIS
- New HTTP handler named aspNetCore
- Configure via web.config
- In the past application is hosted inside of an IIS Worker Process (w3wp.exe) which is the IIS Application Pool.
.image IISHosting.jpg


* Tools and IDE's
- Visual Studio Code
- Ionide
- yoeman? templates
- PUT IN CMDS bs for install


* Conclusions
- Noel
- Possiby too early, e.g. mongodb driver only just released
- Wait for others to jump in
- F# is a no, with not mention on the roadmap either
- Billy 
- TODO
